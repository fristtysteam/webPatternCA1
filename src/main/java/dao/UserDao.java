package dao;

import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.sql.Statement;
import business.User;
import util.AESCrypto;

import javax.crypto.BadPaddingException;

public class UserDao extends Dao implements UserDaoInterface{
    public UserDao(String dbName) {
        super(dbName);
    }

    @Override
    public User registerUser(String username, String email, String password, String address, String phone) throws NoSuchAlgorithmException {
        int newId;
        User user = null;
        String secret = AESCrypto.AESKey();
        AESCrypto.SALT = AESCrypto.salt();
        String hashPassword = AESCrypto.encrypt(password, secret);

        try{
            String query = "INSERT INTO users(userName, email, password, address, phone, fees, secret, salt, userType) VALUES (?, ?, ?, ?, ?, 0, ?, ?, 0)";
            con = getConnection();
            ps = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, username);
            ps.setString(2, email);
            ps.setString(3, hashPassword);
            ps.setString(4, address);
            ps.setString(5, phone);
            ps.setString(6, secret);
            ps.setString(7, AESCrypto.SALT);

            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            // If there was a result, i.e. if the entry was inserted successfully
            if(rs.next())
            {
                // Get the id value that was generated by MySQL when the entry was inserted
                newId = rs.getInt(1);
                user = new User(newId, username, email, password, address, phone, 0, secret, AESCrypto.SALT, 0);
            }

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong");
        }
        finally {
            freeConnection();
        }

        return user;
    }

    @Override
    public User loginUser(String email, String password) {
        int newId;
        String username;
        String hashPass;
        String address;
        String phone;
        int fees;
        String secret;
        String salt;
        int userType;
        User user = null;
        try{
            String query = "SELECT * FROM users WHERE email = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setString(1, email);

            rs = ps.executeQuery();
            // If there was a result, i.e. if the entry was inserted successfully
            if(rs.next())
            {
                // get the password secret salt
                hashPass = rs.getString("password");
                secret = rs.getString("secret");
                salt = rs.getString("salt");

                //check if correct
                if(checkPassword(hashPass, password, secret, salt)){
                    newId = rs.getInt("userID");
                    username = rs.getString("userName");
                    email = rs.getString("email");
                    address = rs.getString("address");
                    phone = rs.getString("phone");
                    fees = rs.getInt("fees");
                    userType = rs.getInt("userType");

                    user = new User(newId, username, email, password, address, phone, fees, secret, salt, userType);
                }
            }

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong");
        }
        catch (BadPaddingException e) {
            System.out.println(e.getMessage());
            System.out.println("padding error, hashing check error");
        } finally {
            freeConnection();
        }

        return user;
    }

    @Override
    public User getUserByID(int userID) {
        int newId;
        String username;
        String email;
        String pass;
        String address;
        String phone;
        int fees;
        String secret;
        String salt;
        int userType;
        User user = null;

        try{
            String query = "SELECT * FROM users WHERE userID = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setInt(1, userID);
            rs = ps.executeQuery();
            // If there was a result, i.e. if the entry was inserted successfully
            if(rs.next())
            {
                newId = rs.getInt("userID");
                username = rs.getString("userName");
                email = rs.getString("email");
                pass = rs.getString("password");
                address = rs.getString("address");
                phone = rs.getString("phone");
                fees = rs.getInt("fees");
                secret = rs.getString("secret");
                salt = rs.getString("salt");
                userType = rs.getInt("userType");

                user = new User(newId, username, email, pass, address, phone, fees, secret, salt, userType);
            }

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong");
        }
        finally {
            freeConnection();
        }

        return user;
    }

    @Override
    public int deleteUserByID(int userID) {
        int rowsAffected = 0;
        try{
            String query = "DELETE FROM users WHERE userID = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setInt(1, userID);

            rowsAffected = ps.executeUpdate();

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong");
        }
        finally {
            freeConnectionUpdate();
        }

        return rowsAffected;
    }

    /**
     * check if password match
     * @param hashPassword the hash password
     * @param password the password
     * @param secret the secret key
     * @param salt the salt
     * @return true or false
     * @throws BadPaddingException padding error
     */
    private boolean checkPassword(String hashPassword, String password, String secret, String salt) throws BadPaddingException {
        AESCrypto.SALT = salt;
        String decPassword = AESCrypto.decrypt(hashPassword, secret);
        return password.equals(decPassword);
    }
}
