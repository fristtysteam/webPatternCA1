package dao;

import java.sql.SQLException;
import java.sql.Statement;
import business.User;
import exceptions.DuplicateEmailException;
import exceptions.DuplicateUsernameException;
import exceptions.InvalidEmailException;
import exceptions.InvalidPasswordException;
import org.mindrot.jbcrypt.BCrypt;

/**
 * @author playerzer0-ui
 */
public class UserDao extends Dao implements UserDaoInterface{
    public UserDao(String dbName) {
        super(dbName);
    }

    @Override
    public User registerUser(String username, String email, String password, String address, String phone) {

        //fail fast
        if(checkUsername(username)){
            throw new DuplicateUsernameException("duplicate username");
        }
        if(checkEmail(email)){
            throw new DuplicateEmailException("duplicate email");
        }

        int newId;
        User user = null;
        String hashPassword = BCrypt.hashpw(password, BCrypt.gensalt());

        try{
            String query = "INSERT INTO users(userName, email, password, address, phone, fees, userType) VALUES (?, ?, ?, ?, ?, 0, 0)";
            con = getConnection();
            ps = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, username);
            ps.setString(2, email);
            ps.setString(3, hashPassword);
            ps.setString(4, address);
            ps.setString(5, phone);

            ps.executeUpdate();
            rs = ps.getGeneratedKeys();
            // If there was a result, i.e. if the entry was inserted successfully
            if(rs.next())
            {
                // Get the id value that was generated by MySQL when the entry was inserted
                newId = rs.getInt(1);
                user = new User(newId, username, email, password, address, phone, 0, 0);
            }

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong with registerUser");
        }
        finally {
            freeConnectionUpdate();
        }

        return user;
    }

    @Override
    public User loginUser(String email, String password) {

        //fail fast
        if(!checkEmail(email)){
            throw new InvalidEmailException("no email found");
        }

        int newId;
        String username;
        String hashPass;
        String address;
        String phone;
        int fees;
        int userType;
        User user = null;
        try{
            String query = "SELECT * FROM users WHERE email = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setString(1, email);

            rs = ps.executeQuery();
            // If there was a result, i.e. if the entry was inserted successfully
            if(rs.next())
            {
                // get the password secret salt
                hashPass = rs.getString("password");

                //check if correct
                if(BCrypt.checkpw(password, hashPass)){
                    newId = rs.getInt("userID");
                    username = rs.getString("userName");
                    email = rs.getString("email");
                    address = rs.getString("address");
                    phone = rs.getString("phone");
                    fees = rs.getInt("fees");
                    userType = rs.getInt("userType");

                    user = new User(newId, username, email, password, address, phone, fees, userType);
                }
                else{
                    throw new InvalidPasswordException("password does not match");
                }
            }

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong with loginUser");
        }
        finally {
            freeConnection();
        }

        return user;
    }

    @Override
    public User getUserByID(int userID) {
        int newId;
        String username;
        String email;
        String pass;
        String address;
        String phone;
        int fees;
        int userType;
        User user = null;

        try{
            String query = "SELECT * FROM users WHERE userID = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setInt(1, userID);
            rs = ps.executeQuery();
            // If there was a result, i.e. if the entry was inserted successfully
            if(rs.next())
            {
                newId = rs.getInt("userID");
                username = rs.getString("userName");
                email = rs.getString("email");
                pass = rs.getString("password");
                address = rs.getString("address");
                phone = rs.getString("phone");
                fees = rs.getInt("fees");
                userType = rs.getInt("userType");

                user = new User(newId, username, email, pass, address, phone, fees, userType);
            }

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong with getUserByID");
        }
        finally {
            freeConnection();
        }

        return user;
    }

    @Override
    public int deleteUserByID(int userID) {
        int rowsAffected = 0;
        try{
            String query = "DELETE FROM users WHERE userID = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setInt(1, userID);

            rowsAffected = ps.executeUpdate();

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong with deleteUserByID");
        }
        finally {
            freeConnectionUpdate();
        }

        return rowsAffected;
    }

    @Override
    public int updateFee(int userID, int fee) {
        int rowsAffected = 0;
        try{
            String query = "UPDATE users SET fees = fees + (?) WHERE userID = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setInt(1, fee);
            ps.setInt(2, userID);

            rowsAffected = ps.executeUpdate();

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong with updateFee");
        }
        finally {
            freeConnectionUpdate();
        }

        return rowsAffected;
    }

    @Override
    public boolean checkUsername(String username) {
        try{
            String query = "SELECT * FROM users WHERE username = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setString(1, username);

            rs = ps.executeQuery();
            //if there is, means there actually is one
            if(rs.next()){
                return true;
            }

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong with updateFee");
        }
        finally {
            freeConnection();
        }
        return false;
    }

    @Override
    public boolean checkEmail(String email) {
        try{
            String query = "SELECT * FROM users WHERE email = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setString(1, email);

            rs = ps.executeQuery();
            //if there is, means there actually is one
            if(rs.next()){
                return true;
            }

        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong with updateFee");
        }
        finally {
            freeConnection();
        }
        return false;
    }

    @Override
    public int updateUserTypeByID(int userID, int userType) {
        int rowsAffected = 0;

        try{
            String query = "UPDATE users SET userType = ? WHERE userID = ?";
            con = getConnection();
            ps = con.prepareStatement(query);
            ps.setInt(1, userType);
            ps.setInt(2, userID);

            rowsAffected = ps.executeUpdate();
        }
        catch(SQLException se){
            System.out.println(se.getMessage());
            System.out.println("something went wrong with updateFee");
        }
        finally {
            freeConnectionUpdate();
        }
        return rowsAffected;
    }
}
